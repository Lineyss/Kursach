# Generated by Django 5.1.3 on 2024-11-29 10:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FileFolder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Идентификатор файлов и папок',
                'verbose_name_plural': 'Идентификатор файлов и папок',
            },
        ),
        migrations.CreateModel(
            name='UserSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('CurrentSize', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Занятое место (гб)')),
                ('MaxSize', models.IntegerField(blank=True, default=30, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='Доступное место (гб)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользовтель',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DownloadURL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Token', models.CharField(blank=True, max_length=50, verbose_name='Токен')),
                ('Owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Создатель ссылки')),
                ('IDFileFolder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.filefolder', unique=True, verbose_name='Файл/Папка')),
            ],
            options={
                'verbose_name': 'Ссылка для скачивания',
                'verbose_name_plural': 'Ссылки для скачивания',
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Action', models.CharField(max_length=100, verbose_name='Действие')),
                ('Date', models.DateTimeField(auto_now_add=True, verbose_name='Дата')),
                ('IDUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('IDFileFolder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.filefolder', verbose_name='Файл/папка')),
            ],
            options={
                'verbose_name': 'Логи',
                'verbose_name_plural': 'Логи',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Path', models.CharField(blank=True, default='/', max_length=100, null=True, verbose_name='Путь')),
                ('Title', models.CharField(max_length=100, verbose_name='Название')),
                ('Size', models.IntegerField(blank=True, default=0, verbose_name='Размер')),
                ('Date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('AllowedUsers', models.ManyToManyField(blank=True, null=True, to=settings.AUTH_USER_MODEL, verbose_name='Доступна пользователяи:')),
                ('IDFileFolder', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.filefolder', verbose_name='Уникальный ID')),
                ('IDFolder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.folder', verbose_name='Папка где хранится папка')),
                ('Owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folder_folder', to=settings.AUTH_USER_MODEL, verbose_name='Владелец)')),
            ],
            options={
                'verbose_name': 'Папка',
                'verbose_name_plural': 'Папки',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Path', models.CharField(blank=True, default='/', max_length=100, null=True, verbose_name='Путь')),
                ('Title', models.CharField(max_length=100, verbose_name='Название')),
                ('Size', models.IntegerField(blank=True, default=0, verbose_name='Размер')),
                ('Date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('File', models.FileField(upload_to='', verbose_name='Файл')),
                ('AllowedUsers', models.ManyToManyField(blank=True, null=True, to=settings.AUTH_USER_MODEL, verbose_name='Доступна пользователяи:')),
                ('Owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_folder', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('IDFileFolder', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.filefolder', verbose_name='Уникальный ID')),
                ('IDFolder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='main.folder', verbose_name='Папка где хранится файл')),
            ],
            options={
                'verbose_name': 'Файл',
                'verbose_name_plural': 'Файлы',
            },
        ),
        migrations.CreateModel(
            name='SharedURI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Premissions', models.CharField(max_length=100)),
                ('Token', models.CharField(blank=True, default='n$$rc!&$w7wc5nbv0ujc+ie_&ru&ge=dh1)i54*ihrh4f!)k(j', editable=False, max_length=50, verbose_name='Токен')),
                ('DateCreate', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('DateDelete', models.DateTimeField(blank=True, editable=False, verbose_name='Дата деактивации')),
                ('IDFileFolder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.filefolder', verbose_name='Папка/Файл')),
                ('IDSender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Создатель ссылки')),
            ],
            options={
                'verbose_name': 'Ссылка доступа',
                'verbose_name_plural': 'Ссылки доступа',
            },
        ),
        migrations.CreateModel(
            name='Teg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=10, verbose_name='Название')),
                ('Color', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Цвет')),
                ('DateTime', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('IDUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Принадлежит')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.AddField(
            model_name='filefolder',
            name='IDTeg',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.teg', verbose_name='Тег'),
        ),
    ]
